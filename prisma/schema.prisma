generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id         String    @id @default(cuid())
  email      String    @unique
  first_name String
  last_name  String
  profilePic String?
  bio        String?
  createdAt  DateTime  @default(now())
  updateAt   DateTime  @updatedAt
  Post       Post[]
  Comment    Comment[]
}

model Tour {
  id            String      @id @default(cuid())
  title         String
  location      String
  thumbnail     String
  photo         String
  price         Float
  startDate     DateTime
  rating        Float
  duration      Int
  description   String
  createdAt     DateTime    @default(now())
  updateAt      DateTime    @updatedAt
  typeId        String
  destinationId String
  destination   Destination @relation(fields: [destinationId], references: [id])
  type          TourType    @relation(fields: [typeId], references: [id], onDelete: Cascade)
  packageId     String?
}

model Destination {
  id        String   @id @default(cuid())
  name      String
  photo     String
  createdAt DateTime @default(now())
  updateAt  DateTime @updatedAt
  posts     Post[]   @relation("PostDestinations")
  Tour      Tour[]
}

// tyoe of tour such as Trkking Beach Icebergs 
model TourType {
  id        String   @id @default(cuid())
  name      String
  createdAt DateTime @default(now())
  updateAt  DateTime @updatedAt
  Tour      Tour[]
}

model Information {
  id            String   @id @default(cuid())
  title         String
  establishment String
  detail        Json
  description   String
  createdAt     DateTime @default(now())
  updateAt      DateTime @updatedAt
}

model Collaborator {
  id        String   @id @default(cuid())
  name      String
  logo      String
  createdAt DateTime @default(now())
  updateAt  DateTime @updatedAt
}

model Review {
  id        String   @id @default(cuid())
  name      String
  photo     String
  rating    Float
  comment   String
  createdAt DateTime @default(now())
  updateAt  DateTime @updatedAt
}

model Post {
  id           String        @id @default(cuid())
  title        String
  slug         String        @unique
  content      String
  summary      String?
  coverImage   String?
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  published    Boolean       @default(false)
  authorId     String
  author       User          @relation(fields: [authorId], references: [id])
  comments     Comment[]
  categories   Category[]    @relation("PostCategories")
  destinations Destination[] @relation("PostDestinations")
}

model Comment {
  id        String   @id @default(cuid())
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  postId    String
  post      Post     @relation(fields: [postId], references: [id])
  authorId  String
  author    User     @relation(fields: [authorId], references: [id])
}

model Category {
  id    String @id @default(cuid())
  name  String @unique
  posts Post[] @relation("PostCategories")
}
